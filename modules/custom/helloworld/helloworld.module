<?php

/**
 * @file
 * Contains helloworld.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function helloworld_help($route_name, RouteMatchInterface $route_match)
{
	switch ($route_name) {
			// Main module help for the helloworld module.
		case 'help.page.helloworld':
			$output = '';
			$output .= '<h3>' . t('About') . '</h3>';
			$output .= '<p>' . t('Hello World example module') . '</p>';
			return $output;

		default:
	}
}

/**
 * Implements hook_theme().
 */
function helloworld_theme()
{
	return [
		'helloworld' => [
			'render element' => 'children',
		],
	];
}
//hook_form_alter --used to change in the forms(defualt value assigning )
//function helloworld_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
function  helloworld_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

	global $base_url;
	$current_path = \Drupal::service('path.current')->getPath();
	//dump($form_id);


	/*
	   $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	   $current_now = \Drupal::currentUser();
	   $roles_now = $current_user->getRoles();
	   $current_user_id = $current_now->id();
	   if(in_array('data_entry',$roles_now)) {
	   $user123 = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	   $current_user_id = $user123->field_operatorcompany->getValue()[0]['target_id'];
	   }/
	   $query = \Drupal::entityQuery('user');
	   $results = $query->condition('field_operatorcompany', $current_user_id )->execute();
	//$results[$current_user_id]=$current_user_id;
	//$str = implode('+',$results);
	//dump($results);*/
	$path_args = explode('/', $current_path);
//	dump($path_args);

	switch ($form_id) {
		case 'user_register_form':
			if($path_args[3] == 'company'){
				$form['actions']['submit']['#value'] = t('Register Company');
			} elseif($path_args[3] == 'data_entry'){
				$form['actions']['submit']['#value'] = t('Register Operator');
			}

			$form = _user_register_form($form, $path_args, $form_state);
			break;
		case 'webform_submission_company_report_node_203_add_form':
			// dump($form);
			$form['actions']['submit']['#submit'][] = '_company_report_handler';
			break;

		case 'node_driver_edit_form':
			unset($form['actions']['delete']);
			break;
		
		case 'node_vehicle_edit_form':
			unset($form['actions']['delete']);
			break;

		case 'node_driver_form':
			//$form=_employeeid_duplication_validate($form,$form_state);
		$form['#validate'][] = '_employeeid_duplication_validate';

	
			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
					$form['actions'][$action]['#submit'][] = 'employee_check_form_submit';
				}
			}


			break;
		case 'node_vehicle_assigment_form':
			$form = _vehicle_assignment_form($form, $path_args);
			$form = _vehicle_assignment_driver_options($form, $path_args);
			$form = _driver_assignment_options($form, $path_args);
			$form['actions']['submit']['#submit'][] = '_vehicle_assignment_submit';

			break;
		case 'node_vehicle_assigment_edit_form':
			$form['actions']['submit']['#submit'][] = '_vehicle_unassignment_submit';
			(string)$form['status']['widget']['value']['#title'] = "UnAssign";

			break;
		case 'user_form':
			//	dump($form['role_change']['widget']['#default_value']);
			$form = _remove_roles($form);
			unset($form['field_employee_type']['widget']['#options']['GENERAL DRIVER']);
			unset($form['field_employee_type']['widget']['#options']['NORMAL EMPLOYEE']);
			break;
		case  'role_delegation_role_assign_form':
			//
			//	dump($form['account']['role_change']['#default_value']);
			/*dump($form);*/
			$form = _remove_selection_roles($form);
			break;

		case  'views_exposed_form':
			//	unset($form['field_branch_name_target_id_verf']['#options'][102]);
			$form = _branch_list_exposed_options($form, $path_args);
			$form=  _department_list_exposed_options($form,$path_args);
			$form['field_trip_completed_status_value']['#options'][1]="Completed";
			$form['field_trip_completed_status_value']['#options'][0]="Ongoing";
			
			$user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  			$current_package = $user->field_package->getValue()[0]['value'];
			// dump($current_package);
			if($current_package != 'Bronze')
			{
				if($path_args[1]=="employeelist")
				{ 
					$form['views_exposed_form'] = array(
					'#markup' => '<div class="text-right exposed-div"><div class="button btn btn-outline-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/node/add/employees_import"><i class="fa fa-upload" aria-hidden="true"></i></a></div>
					<div class="button btn btn-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/sites/default/files/employee_import.csv"><i class="fa fa-download" aria-hidden="true"></i></a></div></div>');
				}
				if($path_args[1]=="vehicles")
				{
					$form['views_exposed_form'] = array(
						'#markup' => '<div class="text-right exposed-div"><div class="button btn btn-outline-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/node/add/vehicles_import"><i class="fa fa-upload" aria-hidden="true"></i></a></div>
						<div class="button btn btn-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/sites/default/files/vehicle_import.csv"><i class="fa fa-download" aria-hidden="true"></i></a></div></div>');
				}
				if($path_args[1]=="fuelmaster")
				{
					$form['views_exposed_form'] = array(
						'#markup' => '<div class="text-right exposed-div"><div class="button btn btn-outline-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/node/add/fuel_master_import"><i class="fa fa-upload" aria-hidden="true"></i></a></div>
						<div class="button btn btn-primary btn-lg download_temp rounded-5"><a href="'.$base_url.'/sites/default/files/fuel_import.csv"><i class="fa fa-download" aria-hidden="true"></i></a></div></div>');
				}
			}
				break;
				
		case 'node_branches_form':
		case 'node_branches_edit_form':	

			$form = _addcompanynameforbranch($form,$form_state);
			$form['#validate'][] = '_branchname_duplication_validate';

			unset($form['actions']['delete']);

			break;

		case 'node_departments_form':
			$form = _addcompanynameforbranch($form,$form_state);
			$form['#validate'][] = '_departmentname_duplication_validate';

			break;		


		case 'node_vehicle_maintenance_form':

			$form= _helloworld_field_driver_name($form,$path_args);
			$form= _helloworld_field_vehicle_name($form,$path_args);


			break;			

		case 'node_accident_reporting_form':		
			$form= _helloworld_field_driver_name($form,$path_args);
			$form= _helloworld_field_vehicle_name($form,$path_args);


			break;			




		case 'node_trip_logging_form':
			$form = _trip_assignment_vehicle_options($form,$path_args);
			$form = _trip_assignment_driver_options($form,$path_args);
			$form = _helloworld_field_driver_name($form, $path_args);
			$form = _helloworld_field_vehicle_name($form, $path_args);
			unset($form['field_trip_completed_status']);
			unset($form['field__odometer_end_trip_reading']);
			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
					$form['actions'][$action]['#submit'][] = 'employee_form_submit';
					$form['actions'][$action]['#submit'][] = 'vehicle_form_submit';
				}
			}
			//dump($form);
			break;
		case 'node_trip_logging_edit_form':

			$form = _trip_assignment_vehicle_edit_options($form,$form_state);
			$form = _trip_assignment_driver_edit_options($form,$form_state);
			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
					$form['actions'][$action]['#submit'][] = 'employee_form_submit';
					$form['actions'][$action]['#submit'][] = 'vehicle_form_submit';
				}
			}

			break;

		case 'node_fuel_master_form':

		//	dump($form);
		//	exit;

			$form['field_fuel_efficiency']['widget'][0]['#element_validate'][] = '_helloworld_calculate_efficency';
			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
					$form['actions'][$action]['#submit'][] = 'fuelfilling_form_submit';
				}
			}



			$form = _vehicle_assignment_driver_options($form, $path_args);


			break;

		case 'node_vehicles_import_form':
			//dump("chandana");

			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {

					//dump("sdjkvjsdbvljds");
					//exit;
					//dump($form);
					$form['actions'][$action]['#submit'][] = 'vehicleimport_form_submit';
					$form['#validate'][] = 'vehicleimport_form_validate';


				}
			}		

			break;

		case 'node_employees_import_form':		

			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {

					//dump("sdjkvjsdbvljds");
					//exit;			
					$form['actions'][$action]['#submit'][] = 'employee_import_form_submit';
					//dump($form);
					$form['#validate'][] = 'employee_import_form_validate';


				}
			}		
			break;


		case 'node_fuel_master_import_form':
			foreach (array_keys($form['actions']) as $action) {
				if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {

					//dump("sdjkvjsdbvljds");
					//exit;			
					$form['actions'][$action]['#submit'][] = '_fuel_import_form_submit';
					//dump($form);
					$form['#validate'][] = 'fuel_import_form_validate';

				}
			}

			break;



	}
}
function employee_check_form_submit (array $form,\Drupal\Core\Form\FormStateInterface $form_state)
{


	       			 $empname = $form_state->getValue('field_licence_expiry_date');

//	       			 dump($empname);	
	
//	exit;

}





function validate_set_error_message(\Drupal\Core\Form\FormStateInterface $form_state,$field,$msg)
{

	$form_state->setErrorByName($field, t($msg));
}

function vehicleimport_form_validate(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	$fid= $form['field_vehicle_import']['widget']['0']['fids']['#value']['0'];

	if($fid == NULL)
	{

		$form_state->setErrorByName('field_vehicle_import', t("File Not uplodaed properly"));

		return -1;
	}

	$array=file_import($form,$form_state,$fid);

	foreach ($array as $key => $value) {
		if($value[11]!=NULL){


			 $connection = \Drupal::database();
                                $result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$value[11]."'");
                                $result = $result->fetchObject();
                                if($result == true)
                                        validate_set_error_message($form_state,'title'.$key,"Registration Number already  exists row number please try another" .($key+1));



			if(empty($value[1]))
			{
				validate_set_error_message($form_state,'field_chassis_no'.$key,"chassis number required at row number" .($key+1));
			}
			if(empty($value[11]))
			{
				validate_set_error_message($form_state,'title'.$key,"Registration Number  required at row number" .($key+1));
			}
			if(empty($value[0]))
			{
				validate_set_error_message($form_state,'field_brand'.$key,"Brand Name required at row number" .($key+1));
			}
			if(empty($value[8]))
			{
				validate_set_error_message($form_state,'field_make'.$key,"make value required at row number" .($key+1));
			}

			if(empty($value[2]))
			{
				validate_set_error_message($form_state,'field_color'.$key,"color required at row number" .($key+1));
			}
			if(empty($value[17]))
			{
				validate_set_error_message($form_state,'field_model'.$key,"model bumber required at row number" .($key+1));
			}
			if(empty($value[4]))
			{
				validate_set_error_message($form_state,'field_fuel_card_expiry_date'.$key,"fuel card expiry value required at row number" .($key+1));
			}
			else
			{
				$fdate=explode('/',$value[4]);
				if(!is_numeric($fdate[0])||!is_numeric($fdate[1])||!is_numeric($fdate[2]) )
					validate_set_error_message($form_state,'field_fuel_card_expiry_date'.$key,"fuel card expiry date should be a number at row number" .($key+1));

			}


			if(empty($value[12]))
			{
				validate_set_error_message($form_state,'field_safet'.$key,"safetystickerexpiry required at row number" .($key+1));
			}

			else
			{
				$sdate=explode('/',$value[12]);
				if(!is_numeric($sdate[0])||!is_numeric($sdate[1])||!is_numeric($sdate[2]) )
					validate_set_error_message($form_state,'field_safet'.$key,"safety date should be a number at row number" .($key+1));

			}


			if(empty($value[6]))
			{
				validate_set_error_message($form_state,'field_insurance_expiry_date'.$key,"insurance expiry required at row number" .($key+1));
			}
			else
			{
				$idate=explode('/',$value[6]);
				if(!is_numeric($idate[0])||!is_numeric($idate[1])||!is_numeric($idate[2]) )
					validate_set_error_message($form_state,'field_insurance_expiry_date'.$key,"insurance date should be a number at row number" .($key+1));

			}

			if(empty($value[15]))
			{
				validate_set_error_message($form_state,'field_fuel_type'.$key,"fueltype required at row number" .($key+1));
			}
			if(empty($value[10]))
			{
				validate_set_error_message($form_state,'field_purchase_date'.$key,"purchase date  required at row number" .($key+1));

			}
			else
			{
				$purchase_date=explode('/',$value[10]);
				if(!is_numeric($purchase_date[0])||!is_numeric($purchase_date[1])||!is_numeric($purchase_date[2]) )
					validate_set_error_message($form_state,'field_purchase_date'.$key,"purchase date should be a number at row number" .($key+1));

			}
			if(empty($value[13]))
			{

				validate_set_error_message($form_state,'field_tank_capacity_in_litres'.$key,"Tank capacity required at row number" .($key+1));
			}
			else
			{
				if(!is_numeric($value[13])) 
				{
					validate_set_error_message($form_state,'field_tank_capacity_in_litres'.$key,"tank capacity should be number" .($key+1));	
				}  
			}

			if(empty($value[19]))
			{
				validate_set_error_message($form_state,'field_branch_name'.$key,"Branch Name  required at row number" .($key+1));
			}
			else
			{
				$connection = \Drupal::database();
				$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$value[19]."'");
				$result = $result->fetchObject();
				if($result == false)
					validate_set_error_message($form_state,'field_branch_name'.$key,"Branch Name does not exists row number" .($key+1));
			}	

		}
	}
}



function fuel_import_form_validate(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	$fid= $form['field_fuel_import']['widget']['0']['fids']['#value']['0'];

	if($fid == NULL)
	{
		$form_state->setErrorByName('field_fuel_import', t("File Not uplodaed properly"));

		return -1;
	}


	$array=file_import($form,$form_state,$fid);

	foreach ($array as $key => $value) {

			if($value[0]!=NULL)
			{
		if(empty($value[0]))
		{

			validate_set_error_message($form_state,'field_vehicle_regno'.$key,"Registartion number required at row number" .($key+1));
		}
		else
		{

/*
			$current_user_id =	_get_company_userid();
			$connection = \Drupal::database();
			$result=$connection->query("SELECT title FROM node_field_data WHERE type='vehicle'and title='".$value[0]."' and uid='".$current_user_id."'");
			// $result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$value[0]."'");
			$result = $result->fetchObject();
			if($result == false)
*/				//validate_set_error_message($form_state,'field_vehicle_regno'.$key,"vehicle regno does not exists for this company at  row number" .($key+1));
		}


		if(empty($value[1]))
		{
			validate_set_error_message($form_state,'field_meter_reading'.$key,"meter reading   required at row number" .($key+1));
		}

		else if(!is_numeric($value[1]))
		{
			validate_set_error_message($form_state,'field_meter_reading'.$key," meter reading should be a number at row number" .($key+1));

		}

		if(empty($value[3]))
		{
			validate_set_error_message($form_state,'field_price_per_litre'.$key," price per litre   required at row number" .($key+1));
		}

		else if(!is_numeric($value[3]))
		{
			validate_set_error_message($form_state,'field_price_per_litre'.$key," price perlitre should be a number at row number" .($key+1));

		}




		if(empty($value[2]))
		{
			validate_set_error_message($form_state,'field_litres_pumped'.$key,"litres pumped required at row number" .($key+1));
		}
		else if(!is_numeric($value[2]))
		{
			validate_set_error_message($form_state,'field_litres_pumped'.$key,"litres  pumped should be a number at row number" .($key+1));

		}

		if(empty($value[5]))
		{
			validate_set_error_message($form_state,'field_fuel_date'.$key,"fuel filled date required at row number" .($key+1));
		}
		else if(!empty($value[5]))
		{
			$fuelfilleddate=explode('/',$value[5]);
			if(!is_numeric($fuelfilleddate[0]) || !is_numeric($fuelfilleddate[1]) || !is_numeric($fuelfilleddate[2]) )
				validate_set_error_message($form_state,'field_fuel_date'.$key,"fuel filled date  should be a number at row number" .($key+1));
		}


	}


	}

} 


function employee_import_form_validate(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{

	$fid= $form['field_employee_import']['widget']['0']['fids']['#value']['0'];
	if($fid == NULL)
	{
		$form_state->setErrorByName('field_employee_import', t("File Not uplodaed properly"));

		return -1;
	}
	$array=file_import($form,$form_state,$fid);

	foreach ($array as $key => $value) {
		if($value[0]!=NULL){


			
			$current_user_id =      _get_company_userid();


       			 $empname = $form_state->getValue('field_driver_id');
        		$emp_name = $value[3];
        		// dump($emp_name);
        		$connection = \Drupal::database();
       			 $query = $connection->query("SELECT * FROM {node__field_driver_id} as ename

                        INNER JOIN {node_field_data} as data on data.nid=ename.entity_id 
                        WHERE data.uid ='". $current_user_id."' AND  data.type='driver' AND ename.field_driver_id_value='".$emp_name."'");

       			 // dump($query);
       				 $referenced_nids = $query->fetchObject();
       				 // dump($referenced_nids);
       				 // die;
/*
        if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
        {

		validate_set_error_message($form_state,'field_driver_id'.$key,"Employee ID Duplicated at row number" .($key+1));


        }
*/


			if(empty($value[5]))
			{
				validate_set_error_message($form_state,'field_doj'.$key,"Date of joining required at row number" .($key+1));
			}
			else
			{
				$dojo=explode('/',$value[5]);
				if(!is_numeric($dojo[0]) || !is_numeric($dojo[1]) || !is_numeric($dojo[2]) )
					validate_set_error_message($form_state,'field_doj'.$key,"Date of joining  should be a number at row number" .($key+1));

			}
			if(!empty($value[4]))
			{
				$dobo=explode('/',$value[4]);
				if(!is_numeric($dobo[0]) || !is_numeric($dobo[1]) || !is_numeric($dobo[2]) )
					validate_set_error_message($form_state,'field_dob'.$key,"Date of Birth  should be a number at row number" .($key+1));
			}

			if(empty($value[3]))
			{
				validate_set_error_message($form_state,'field_driver_id'.$key,"Employee ID required at row number" .($key+1));
			}

			if(empty($value[2]))
			{
				validate_set_error_message($form_state,'field_employee_type'.$key,"Employee Type required at row number" .($key+1));
			}
			else
			{
				
				if(strtoupper($value[2])!="GENERAL DRIVER" && strtoupper($value[2])!= "NORMAL EMPLOYEE")
				{

			
					validate_set_error_message($form_state,'field_employee_type'.$key,"Only GENERAL DRIVER and NORMAL EMPLOYEE values are Allowed " .($key+1));

				}	
              }

			if(empty($value[9]))

			{
				validate_set_error_message($form_state,'field_mobil'.$key,"model number required at row number" .($key+1));
			}
			else
			{
				// if(!is_numeric($value[9])
				//validate_set_error_message($form_state,'field_mobil'.$key,"mobile number is number at row number" .($key+1));



			}
			if(empty($value[7]))
			{

				validate_set_error_message($form_state,'field_licence_expiry_date'.$key,"licenceexpiry expiry value required at row number" .($key+1));
			}
			else
			{


			//	dump($value[7]);
				//dump($licence_date);
				$licence_date=explode('/',$value[7]);

				//dump($licence_date);
				//exit;

				if(!is_numeric($licence_date[0]) || !is_numeric($licence_date[1]) || !is_numeric($licence_date[2]) )
					validate_set_error_message($form_state,'/'.$key,"licence expiry date should be a number at row number" .($key+1));

			}

			if(empty($value[8]))
			{
				validate_set_error_message($form_state,'field_licence_no'.$key," Licence No  required at row number" .($key+1));
			}


			if(empty($value[11]))
			{
				validate_set_error_message($form_state,'field_branch_name'.$key,"Branch Name  required at row number" .($key+1));

			}
			else
			{
				$connection = \Drupal::database();
				$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$value[11]."'");
				$result = $result->fetchObject();
				if($result == false)
					validate_set_error_message($form_state,'field_branch_name'.$key,"Branch Name does not exists row number" .($key+1));
			}



			if(empty($value[12]))
			{
				validate_set_error_message($form_state,'field_de'.$key,"Department Name  required at row number" .($key+1));

			}
			else
			{




				$current_user_id =	_get_company_userid();
			$connection = \Drupal::database();
			$result=$connection->query("SELECT title FROM node_field_data WHERE type='departments'and title='".$value[12]."' and uid='".$current_user_id."'");
			$result = $result->fetchObject();
			if($result == false)
				//validate_set_error_message($form_state,'field_vehicle_regno'.$key,"vehicle regno does not exists for this company at  row number" .($key+1));

				validate_set_error_message($form_state,'field_de'.$key,"Department Name does not exists for this company row number" .($key+1));


			}
		}
	}

}


function vehicleimport_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	$fid= $form['field_vehicle_import']['widget']['0']['fids']['#value']['0'];
	if($fid == NULL)
	{
		$form_state->setErrorByName('field_vehicle_import', t("File Not uplodaed properly"));

		return -1;
	}

	$array = file_import($form,$form_state,$fid);


	foreach ($array as $key => $row) {
		//  	dump($row);

		if($row[11]!=NULL)
			import_values_vehicle($row);
	}	
}


function _fuel_import_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	//dump("klnknlk");li
	$fid= $form['field_fuel_import']['widget']['0']['fids']['#value']['0'];

	if($fid == NULL)
	{

		$form_state->setErrorByName('field_fuel_import', t("File Not uplodaed properly"));

		return -1;
	}

	$array = file_import($form,$form_state,$fid);

//dump($array);
//exit;
//dump($array);
	foreach ($array as $key => $row) {
//		    dump($row);

		if($row[0]!=NULL)
		import_values_fuel($row);
	}
}



function employee_import_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{

	$fid= $form['field_employee_import']['widget']['0']['fids']['#value']['0'];

	if($fid == NULL)
	{
		$form_state->setErrorByName('field_employee_import', t("File Not uplodaed properly"));

		return -1;
	}

	$array= file_import($form,$form_state,$fid);
	foreach ($array as $key => $row) {
		//		   	 	dump($row);
		//		   	 	exit;	
		if($row[0]!=NULL)
			import_values_employee($row);
	}	


}
function import_values_employee($employee)
{


	$connection = \Drupal::database();
	$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$employee[11]."'");
	$result= $result->fetchObject();
	$branch = $result->nid;
	$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$employee[12]."'");
	$result= $result->fetchObject();
	$dep=$result->nid;


	$dob = str_replace('/', '-', $employee[4]);

	$dob = date("Y-m-d", strtotime($dob));		


	$doj = str_replace('/', '-', $employee[5]);

	$doj = date("Y-m-d", strtotime($doj));		


   
	$licenceexpiry = str_replace('/', '-', $employee[7]);

	$licenceexpiry = date("Y-m-d", strtotime($licenceexpiry));		

//	dump($employee[5]);
//	dump($doj);
//	dump($dob);

//	dump($employee[7]);
//	dump($licenceexpiry);
//	exit;

	$node = Node::create([
			'type'        => 'driver',
			'title'       => $employee[0],
			'field_name' => $employee[1],
			'field_employee_type' => $employee[2],
			'field_driver_id'=> $employee[3],
			'field_dob'=> $dob,
			'field_doj'=> $doj,
			'field_email'=> $employee[6],	
			'field_licence_expiry_date'=> $licenceexpiry,
			'field_licence_no'=> $employee[8],
			'field_mobil'=>$employee[9],
			'field_altern'=> $employee[10],
			'field_branch_name'=> $branch,
			'field_de'=> $dep]);
	$node->save();


}




function import_values_fuel($fuel)
{


	$connection = \Drupal::database();
	$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$fuel[0]."'");
	$result= $result->fetchObject();
	$regno = $result->nid;


	$fuel_filled_date = str_replace('/', '-', $fuel[5]);

	$fuel_filled_date = date("Y-m-d", strtotime($fuel_filled_date));



	$fuel_expiry_date = str_replace('/', '-', $fuel[7]);

	$fuel_expiry_date = date("Y-m-d", strtotime($fuel_expiry_date));




	$node = Node::create([
			'type'        => 'fuel_master',
			'title'       => $fuel[0],   

			
			'field_vehicle_regno' =>array(0=>array('target_id'=>$fuel[0])),
			'field_meter_reading' => $fuel[1],
			'field_litres_pumped'=> $fuel[2],
			'field_price_per_litre'=> $fuel[3],
			'field_fuel_station_name'=> $fuel[4],
			'field_fuel_date'=> $fuel_filled_date,
			'field_fuel'=> $fuel[6],
			'field_fuel_card_expiry_date'=> $fuel_expiry_date]);
	$node->save();


}



function file_import(array $form, \Drupal\Core\Form\FormStateInterface $form_state,$fid)
{


	global $base_url;
	//$fid= $form['field_vehicle_import']['widget']['0']['fids']['#value']['0'];
	$file_imported=\Drupal\file\Entity\File::load($fid);

//	dump($file_imported);


	$file_destination=$file_imported->createFileUrl();
	/*need to deleted in live server chandana*/
	$base_path_file	 = explode('/',$base_url);

	$pop_var=array_pop($base_path_file);
	$final_path = implode('/',$base_path_file);
	/**********************************************************/-
		// dump($final_path);
		//dump($file_destination);
		//exit;
		$data = @file_get_contents($final_path.$file_destination);
	$rows = explode("\n",$data);
	$array=[];
	$lines = explode(PHP_EOL, $data);

// dump($rows);
// dump($lines);
// exit;
	foreach ($rows as $line) {
		// dump($line);
		$array[] = explode(",", $line);
	}

	/*	for($i=1;$i<count($array)-1;$i++)*/
	
	array_shift($array);
//		exit;
	$array=array_filter($array);
// dump($array);
// exit;
	return $array;

}




function import_values_vehicle($vehicle)
{


	$connection = \Drupal::database();
	$result=$connection->query("SELECT nid FROM node_field_data WHERE title='".$vehicle[19]."'");
	$result= $result->fetchObject();

	$fuelcardexpiry = str_replace('/', '-', $vehicle[4]);

	$fuelcardexpiry = date("Y-m-d", strtotime($fuelcardexpiry));		


	$insuranceexpiry = str_replace('/', '-', $vehicle[6]);

	$insuranceexpiry = date("Y-m-d", strtotime($insuranceexpiry));		


	$safetystickerexpiry = str_replace('/', '-', $vehicle[12]);

	$safetystickerexpiry = date("Y-m-d", strtotime($safetystickerexpiry));		

	$purchasedate = str_replace('/', '-', $vehicle[10]);

	$purchasedate = date("Y-m-d", strtotime($purchasedate));

	$node = Node::create([
			'type'        => 'vehicle',
			'title'       => $vehicle[11],
			'field_chassis_no' => $vehicle[1],
			'field_color' => $vehicle[2],
			'field_brand'=> $vehicle[0],
			'field_engine_no'=> $vehicle[16],
			'field_fleet'=> $vehicle[18],
			'field_branch_name'=> $result->nid,	
			'field_fuel_type'=> $vehicle[15],
			'field_engine_capacity'=> $vehicle[3],
			'field_fuel_card_expiry_date'=>$fuelcardexpiry,
			'field_make'=> $vehicle[8],
			'field_model'=> $vehicle[17],
			'field_purchase_cost'=> $vehicle[9],
			'field_purchase_date'=> $purchasedate,
			'field_safet'=> $safetystickerexpiry,
			'field_tank_capacity_in_litres'=> $vehicle[13],
			'field_insurance_expiry_date'=> $insuranceexpiry,
			'field_insurance_vendor'=>$vehicle[7],
			'field_tyre_type'=>$vehicle[14]]);
	$node->save();


}



function _company_report_handler($form, &$form_state){
	$from_date=$form_state->getValue('from_date');
	$to_date=$form_state->getValue('to_date');
	$status=$form_state->getValue('status');
	//dump($from_date);
	//dump($to_date);
	//dump($status);
	// die;
}
/**
 * Generate the node editing form array.
 */
function helloworld_node_form_array($node) {

	// Add the buttons.
	$form['preview'] = array('#type' => 'button', '#value' => t('Preview'), '#weight' => 40);
	$form['submit'] = array('#type' => 'submit', '#value' => t('Submit'), '#weight' => 45);
	if ($node->nid && node_access('delete', $node)) {
		$form['delete'] = array('#type' => 'button', '#value' => t('DELETESS'), '#weight' => 50);
	}
}

function fuelmaster_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
	//die("I'm not getting run, why :(");
	//dump("hello");

	$fuelefficiency=$form_state->getValue('field_fuel_efficiency')['0']['value'];
	$vehicle_id =$form_state->getValue('field_vehicle_regno')['0']['target_id'];
	$node = Node::load($vehicle_id);
	$node->set('field_efficiency_fuel',$fuelefficiency);
	$node->save();
	//dump($node);
	//exit;

	// \Drupal::service('messenger')->addMessage("Why won't this message show?");
}

function employee_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
	//die("I'm not getting run, why :(");
	//dump("hello");				   
	//dump($form_state->getValue('field_trip_completed_status'));
	//exit;		
	$tripstatus=$form_state->getValue('field_trip_completed_status')['value'];
	$employee_id =$form_state->getValue('field_driver_name')['0']['target_id'];
	$node = Node::load($employee_id);
	if($tripstatus==true)
		$node->set('field_trip_status',false);
	else 
		$node->set('field_trip_status',true);

	//$node->set('field_trip_status',$tripstatus);
	$node->save();

}



function _addcompanynameforbranch($form,$form_state)
{



	$current_user_id =	_get_company_userid();

	$current_user = \Drupal\user\Entity\User::load($current_user_id);

	$form['field_companybranch']['widget'][0]['target_id']['#default_value'] = $current_user;

	return $form;
}

function vehicle_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
	//die("I'm not getting run, why :(");

	//dump($form_state->getValue('field_trip_completed_status'));
	//exit;		
	$tripstatus=$form_state->getValue('field_trip_completed_status')['value'];
	$vehicle_id =$form_state->getValue('field_vehicle_regno')['0']['target_id'];
	$node = Node::load($vehicle_id);
	if($tripstatus==true)
		$node->set('field_status_trip',false);
	else 
		$node->set('field_status_trip',true);



	$node->save();

}

function fuelfilling_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	//die("I'm not getting run, why :(");
	//dump("hello");

	//dump($form_state);
//	exit;
	$fuelefficiency=$form_state->getValue('field_fuel_efficiency')['0']['value'];
	$vehicle_id =$form_state->getValue('field_vehicle_regno')['0']['target_id'];



	$connection = \Drupal::database();

	$result=$connection->query("SELECT efficiency.field_fuel_efficiency_value FROM {node__field_fuel_efficiency} as efficiency INNER JOIN {node__field_vehicle_regno} as regno on regno.entity_id=efficiency.entity_id
			WHERE regno.field_vehicle_regno_target_id = '".$vehicle_id."' 
			");

	$efficiencyavg=[];	
	//$referenced_nids = $query->fetchObject();
	foreach ($result as $record   ) {

		$efficiencyavg[]=$record->field_fuel_efficiency_value;
	}

	$fuelavg=0;
	if(sizeof($efficiencyavg)>0)
	{

		$fuelavg=array_sum($efficiencyavg)/sizeof($efficiencyavg);


	}


	$node = Node::load($vehicle_id);
	$node->set('field_efficiency_fuel',$fuelefficiency);
	$node->set('field_efficiency_average',$fuelavg);
	$node->save();	

}





function company_status_submit(&$element, FormStateInterface $form_state, &$complete_form)
{
	$form_state->setValueForElement($element, ['value' => 1]);
}
function operator_status_submit(&$element, FormStateInterface $form_state, &$complete_form)
{
	$form_state->setValueForElement($element, ['value' => 1]);
}
function _helloworld_calculate_efficency(&$element, FormStateInterface $form_state, &$complete_form)
{
	/*getting previous odometer reading*/
	$current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	$current_now = \Drupal::currentUser();
	$roles_now = $current_user->getRoles();
	$current_user_id = $current_now->id();
	if (in_array('data_entry', $roles_now)) {
		$user123 = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
		$current_user_id = $user123->field_operatorcompany->getValue()[0]['target_id'];
	}
	$query = \Drupal::entityQuery('user');
	$results = $query->condition('field_operatorcompany', $current_user_id)->execute();
	$results[$current_user_id] = $current_user_id;
	$companyuids = implode(',', $results);
	//dump($companyuids);
	$connection = \Drupal::database();
	$query = $connection->query("SELECT meter_reading.field_meter_reading_value,pumped.field_litres_pumped_value  FROM {node__field_meter_reading} AS meter_reading
			INNER JOIN {node_field_data} AS node_data ON node_data.nid = meter_reading.entity_id
			INNER JOIN {node__field_litres_pumped} AS pumped ON pumped.entity_id = meter_reading.entity_id
			WHERE node_data.uid IN (" . $companyuids . ") ORDER BY node_data.nid DESC LIMIT 1");
	$referenced_nids = $query->fetchObject();
	/* previous meter reading*/
	$meter_reading_previous = $referenced_nids->field_meter_reading_value;
	/* previous litres pumped */
	$litres_pumped_previous = $referenced_nids->field_litres_pumped_value;

	/* getting current meter reading*/
	$values = $form_state->cleanValues()->getValues();
	$meter_reading_current = $form_state->getValue('field_meter_reading');

	$meter_reading_diff = ($meter_reading_current[0]['value'] - $meter_reading_previous);



	if(($litres_pumped_previous!=0 || $litres_pumped_previous !=NULL) &&($meter_reading_diff >= 0) )

		//	if($litres_pumped_previous!=0 || $litres_pumped_previous !=NULL)
	{	
		$efficiency = $meter_reading_diff / $litres_pumped_previous;

		$efficiency = number_format((float)$efficiency, 2, '.', '');

		$form_state->setValueForElement($element, ['value' => $efficiency]);
	}
	//$form_state->setValue('field_fuel_efficiency', $efficiency);
	//$form_state->setRebuild();





}


function _helloworld_field_driver_name($form, $path_args)
{
	$form['field_vehicle_regno']['widget']['#ajax'] = array(
			'callback' => 'ajax_view_display_dropdown_callback',
			'wrapper' => 'view-display-dropdown',
			'event' => 'change',
			'progress' => [
			'type' => 'throbber',
			'message' => 'Verifying entry...',
			],
			);

	//$form['field_driver_name']['widget']['#default_value']=array(0=>'25');
	$form['field_driver_name']['#prefix'] = '<div id="view-display-dropdown">';
	$form['field_driver_name']['#suffix'] = '</div>';
	return $form;
}




function _helloworld_field_vehicle_name($form, $path_args)
{
	$form['field_driver_name']['widget']['#ajax'] = array(
			'callback' => 'ajax_view_driver_displaydropdown_callback',
			'wrapper' => 'view-driver-displaydropdown',
			'event' => 'change',
			'progress' => [
			'type' => 'throbber',
			'message' => 'Verifying entry...',
			],
			);

	//$form['field_driver_name']['widget']['#default_value']=array(0=>'25');
	$form['field_vehicle_regno']['#prefix'] = '<div id="view-driver-displaydropdown">';
	$form['field_vehicle_regno']['#suffix'] = '</div>';
	return $form;
}

function ajax_view_driver_displaydropdown_callback($form, $form_state)
{
	//dump("Hello");

	$values = $form_state->cleanValues()->getValues();
	$drivername = $form_state->getValue('field_driver_name');
	$drivername_nid = $drivername['0']['target_id'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT vehicle.field_vehicle_target_id FROM {node__field_driver_name} as driver 
			INNER JOIN {node__field_vehicle} as vehicle ON vehicle.entity_id=driver.entity_id
			INNER JOIN {node_field_data} as node ON node.nid=driver.entity_id 
			WHERE  node.status=1 AND driver.field_driver_name_target_id=" .
			$drivername_nid);
	$referenced_nids = $query->fetchObject();
	//dump($referenced_nids);
	$form['field_vehicle_regno']['widget']['#value'] = (int)$referenced_nids->field_vehicle_target_id;
	//dump($referenced_nids->field_driver_name_target_id);
	//  $form['field_driver_name']['widget']['#value'] = 25;
	//$form['field_vehicle_regno']['widget']['#value'] = 82;

	return $form['field_vehicle_regno'];
}

function ajax_view_display_dropdown_callback($form, $form_state)
{
	//dump("Hello");
	$values = $form_state->cleanValues()->getValues();
	$vehicle_regno = $form_state->getValue('field_vehicle_regno');
	$vehicle_regno_nid = $vehicle_regno['0']['target_id'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT drivername.field_driver_name_target_id FROM {node__field_vehicle} as vehicle 
			INNER JOIN {node__field_driver_name} as drivername ON drivername.entity_id=vehicle.entity_id
			INNER JOIN {node_field_data} as node ON node.nid=vehicle.entity_id 
			WHERE  node.status=1 AND vehicle.field_vehicle_target_id=" .
			$vehicle_regno_nid);
	$referenced_nids = $query->fetchObject();
	//dump($referenced_nids);
	$form['field_driver_name']['widget']['#value'] = (int)$referenced_nids->field_driver_name_target_id;
	//dump($referenced_nids->field_driver_name_target_id);
	//  $form['field_driver_name']['widget']['#value'] = 25;

	return $form['field_driver_name'];
}



function helloworld_node_builder(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle)
{
	echo '@@';
	exit;
}

function get_role_array($role_name, $form)
{
	$roles = array();

	foreach ($form['account']['roles']['#options'] as $key => $value) {
		if ($value == $role_name) {
			$roles[] = $key;
			break;
		}
	}

	return $roles;
}

//operator ergistration and company regostration different js 
//hook_page_attachments
function helloworld_page_attachments(array &$page)
{
	$current_path = \Drupal::service('path.current')->getPath();
	$path_args = explode('/', $current_path);
	if (!empty($path_args[2])) {
		$user123 = \Drupal\user\Entity\User::load($path_args[2]);
	}
	$userroles = [];
	if (!empty($user123)) {
		$userroles = $user123->getRoles();
	}
	// $current_user_id = $user123->field_operatorcompany->getValue()[0]['target_id'];
	//dump($user123->getRoles());
	if (($path_args[2] == "register" && $path_args[3] == "company") || ($path_args[1] == "user" && $path_args[2] == "login")) {
		$page['#attached']['library'][] = 'helloworld/company-lib';
	} else 	if (($path_args[2] == "register" &&  $path_args[3] == "data_entry") || ($path_args[1] == "user" && $path_args[3] == "roles") || (in_array('data_entry', $userroles))) {
		//	dump($page);
		$page['#attached']['library'][] = 'helloworld/operator-lib';
	} else if ($path_args[3] == "edit") {

		$page['#attached']['library'][] = 'helloworld/general-lib';
	}
}
function _user_register_form($form, $path_args, &$form_state)
{
	$form['account']['mail']['#description'] = '';
	$form['account']['name']['#description'] = '';
	if ($path_args[3] == "data_entry") {
		$roles = get_role_array('Operator', $form);
		$form['account']['roles']['#default_value'] = $roles;

		$form['#validate'][] = '_operatorname_duplication_validate';

		$form['account']['status']['#element_validate'][] = 'operator_status_submit';
		$current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
		//	dump(\Drupal\user\Entity\User::load(\Drupal::currentUser()->id()));

		$form['field_operatorcompany']['widget'][0]['target_id']['#default_value'] = $current_user;
		$form['#attached']['library'][] = 'helloworld/operator-lib';
		/*$form['field_first_name']['widget'][0]['value']['#default_value'][0] = 'value';*/
	} else if ($path_args[3] == "company") {
		$roles = get_role_array('company', $form);
		$form['account']['roles']['#default_value'] = $roles;
		$form['#validate'][] = '_companyname_duplication_validate';
		$form['account']['status']['#element_validate'][] = 'company_status_submit';
		if(\Drupal::currentUser()->id()){
			// dump('test');
			$form['#attached']['library'][] = 'fleet_management_theme/back-style';
		}else{
			$form['actions']['submit']['#submit'][] = '_redirect_after_registration_user_register_submit';
		}

	}
	return $form;
	// dump($form);
}




function _get_company_userid()
{
	$current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

	$current_now = \Drupal::currentUser();
	$roles_now = $current_user->getRoles();
	$current_user_id = $current_now->id();
	if(in_array('data_entry',$roles_now)) {
		$user123 = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
		$current_user_id = $user123->field_operatorcompany->getValue()[0]['target_id'];
	}

	return $current_user_id;
}
function _operatorname_duplication_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	///dump($form_state);


	$companyid =	_get_company_userid();		
	$firstname = $form_state->getValue('field_first_name');
	$first_name = $firstname['0']['value'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT * FROM {user__field_first_name} as firstname
			INNER JOIN {user__field_operatorcompany} as company ON company.entity_id = firstname.entity_id AND company.field_operatorcompany_target_id='".$companyid."' 
			WHERE firstname.field_first_name_value ='". $first_name."'");

	$referenced_nids = $query->fetchObject();
	//dump($referenced_nids);
	//dump($first_name);

	if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
	{
		$form_state->setErrorByName('field_first_name', t('Operator Already exists with UserName/firstname Please try another name'));

	}


}


function _branchname_duplication_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	//dump($form_state);
	//return $form;	
	//return $form;
	$current_user_id =	_get_company_userid();

	$branchname = $form_state->getValue('title');
	$branch_name = $branchname['0']['value'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT * FROM {node} as bname
			INNER JOIN {node__field_companybranch} as company ON company.entity_id = bname.nid AND company.bundle='branches'
			INNER JOIN {node_field_data} as data on data.nid=bname.nid AND data.vid = bname.vid
			WHERE  bname.type='branches' AND company.field_companybranch_target_id ='". $current_user_id."' AND 
			data.title='".$branch_name."'");

	$referenced_nids = $query->fetchObject();
	//dump($referenced_nids);


	if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
	{
		$form_state->setErrorByName('title', t('Branch Name Already exists  Please try another name'));
	}


}


function _employeeid_duplication_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

	$current_user_id =	_get_company_userid();

	//dump($current_user_id);

	$empname = $form_state->getValue('field_driver_id');
	$emp_name = $empname['0']['value'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT * FROM {node__field_driver_id} as ename

			INNER JOIN {node_field_data} as data on data.nid=ename.entity_id 
			WHERE data.uid ='". $current_user_id."' AND  data.type='driver' AND ename.field_driver_id_value='".$emp_name."'");

	$referenced_nids = $query->fetchObject();
	/*dump("SELECT * FROM {node__field_driver_id} as ename
	  INNER JOIN {node_field_data} as data on data.nid=ename.entity_id 
	  WHERE data.uid ='". $current_user_id."' AND  data.type='driver' AND ename.field_driver_id_value='".$emp_name."'");
	  dump($referenced_nids);
	  dump(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ));*/

	if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
	{
		$form_state->setErrorByName('field_driver_id', t('Employee ID Already exists  Please try another name'));

	}

	return $form;

}


function _departmentname_duplication_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	//dump($form_state);
	//exit;

	//return $form;
	$current_user_id =	_get_company_userid();

	$depname = $form_state->getValue('title');
	$dep_name = $depname['0']['value'];
	$connection = \Drupal::database();
	$query = $connection->query("SELECT * FROM {node} as bname
			INNER JOIN {node__field_companybranch} as company ON company.entity_id = bname.nid AND company.bundle='departments'
			INNER JOIN {node_field_data} as data on data.nid=bname.nid AND data.vid = bname.vid
			WHERE  bname.type='departments' AND company.field_companybranch_target_id ='". $current_user_id."' AND 
			data.title='".$dep_name."'");

	$referenced_nids = $query->fetchObject();
	//dump($referenced_nids);


	if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
	{
		$form_state->setErrorByName('title', t('Department Name Already exists  Please try another name'));

	}


}

function _companyname_duplication_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	// dump($form_state);

	$companyname = $form_state->getValue('field_company_name');
	$companyname = $companyname['0']['value'];
	$connection = \Drupal::database();

	$query = $connection->query("SELECT * FROM {user__field_company_name} as companyname WHERE companyname.field_company_name_value ='". $companyname."'");

	$referenced_nids = $query->fetchObject();
	if(($referenced_nids != false) ||($referenced_nids != NULL) || ($referenced_nids != "" ))
	{
		$form_state->setErrorByName('field_company_name', t('Company Already exists with this namee= Please try another name'));

	}


}






function _redirect_after_registration_user_register_submit($form, &$form_state)
{
	// dump($form);
	// dump($form_state);
	
	$company_email = $form_state->getValue('mail');
	$request = \Drupal::request();
	$session = $request->getSession();
	$session->set('company_email', $company_email);

	$redirect_destination = '/user/login';
	if (!empty($redirect_destination)) {
		$url = Url::fromUri('internal:' . $redirect_destination);
		$form_state->setRedirectUrl($url);
	}
}

function _vehicle_assignment_form($form, $path_args)
{
	return $form;
}
function _vehicle_assignment_driver_options($form, $path_args)
{

	$view = \Drupal\views\Views::getView('driver_details');
	$view->setDisplay('entity_reference_1');
	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none' => '- Select a value -');

	foreach ($view->result as $value) {
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	//  	dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_driver_name']['widget']['#options'] = $unpubishedList;
	return $form;
}


function _branch_list_exposed_options($form, $path_args)
{

	$view = \Drupal\views\Views::getView('branch_list');
	$view->setDisplay('entity_reference_1');
	// contextual relationship filter  

	//$view->setArguments([$id]);
	$view->execute();

	/*$render_view = $view->result;
	  $form['field_branch_name_target_id_verf']['#options']=$render_view;*/

	$render_view = $view->result;
	$branchList = array('All' => $form['field_branch_name_target_id_verf']['#options']['All']);
	foreach ($view->result as $value) {
		$tet = $value->_entity;
		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$branchList[$nid] = $title;
	}
	if (!empty($branchList)) {
		/*		dump($form['field_branch_name_target_id_verf']['#options'])	;
		 */
		$form['field_branch_name_target_id_verf']['#options'] = $branchList;
	} else {
		unset($form['field_branch_name_target_id_verf']);
	}
	return $form;
}


function _department_list_exposed_options($form, $path_args)
{

	$view = \Drupal\views\Views::getView('department_list');
	$view->setDisplay('entity_reference_1');
	// contextual relationship filter  

	//$view->setArguments([$id]);
	$view->execute();

	/*$render_view = $view->result;
	  $form['field_branch_name_target_id_verf']['#options']=$render_view;*/

	$render_view = $view->result;
	$depList = array('All' => $form['field_de_target_id_verf']['#options']['All']);
	foreach ($view->result as $value) {
		$tet = $value->_entity;
		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$depList[$nid] = $title;
	}
	if (!empty($depList)) {
		/*		dump($form['field_branch_name_target_id_verf']['#options'])	;
		 */
		$form['field_de_target_id_verf']['#options'] = $depList;
	} else {
		unset($form['field_de_target_id_verf']);
	}
	return $form;
}

function _driver_assignment_options($form, $path_args)
{

	$view = \Drupal\views\Views::getView('driver_details');
	$view->setDisplay('entity_reference_2');
	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none' => '- Select a value -');

	foreach ($view->result as $value) {
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	//      dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_vehicle']['widget']['#options'] = $unpubishedList;
	return $form;
}
function _vehicle_assignment_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	$driver_id = $form_state->getValue('field_driver_name')['0']['target_id'];
	$vehicle_id = $form_state->getValue('field_vehicle')['0']['target_id'];

	$driver_node = Node::load($driver_id);
	$vehicle_node = Node::load($vehicle_id);

	$driver_node->status = 0;
	$vehicle_node->status = 0;

	$driver_node->save();
	$vehicle_node->save();
}


function _trip_assignment_vehicle_options($form,$path_args)
{

	$view = \Drupal\views\Views::getView('trip_logging');
	$view->setDisplay('entity_reference_5');
	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none'=>'- Select a value -');

	//dump($view->result);

	foreach($view->result as $value){
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	//  	dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_vehicle_regno']['widget']['#options'] = $unpubishedList;
	return $form;

}


function _trip_assignment_vehicle_edit_options($form,$form_state)
{
	$vehicledefaultid = $form['field_vehicle_regno']['widget']['#default_value']['0'];
	$vehicledefaulttext = $form['field_vehicle_regno']['widget']['#options'][$vehicledefaultid];
	//dump($form['field_vehicle_regno']);

	$view = \Drupal\views\Views::getView('trip_logging');

	$view->setDisplay('entity_reference_5');

	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none'=>'- Select a value -');

	//	dump($form_state);

	foreach($view->result as $value){
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	$unpubishedList[$vehicledefaultid]=$vehicledefaulttext;
	//  	dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_vehicle_regno']['widget']['#options'] = $unpubishedList;
	return $form;

}

function _trip_assignment_driver_options($form,$path_args)
{

	$view = \Drupal\views\Views::getView('trip_logging');
	$view->setDisplay('entity_reference_1');
	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none'=>'- Select a value -');

	//dump($view->result);

	foreach($view->result as $value){
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	//dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_driver_name']['widget']['#options'] = $unpubishedList;
	return $form;

}


function _trip_assignment_driver_edit_options($form,$form_state)
{
	$driverdefaultid = $form['field_driver_name']['widget']['#default_value']['0'];
	$driverdefaulttext = $form['field_driver_name']['widget']['#options'][$driverdefaultid];
	//dump($form['field_driver_name']);

	$view = \Drupal\views\Views::getView('trip_logging');

	$view->setDisplay('entity_reference_1');

	// contextual relationship filter  
	//$view->setArguments([$id]);
	$view->execute();
	$render_view = $view->result;
	$unpubishedList = array('_none'=>'- Select a value -');

	//	dump($form_state);

	foreach($view->result as $value){
		//dump($view->result);
		$tet = $value->_entity;

		$nid = $tet->get("nid")->getValue()[0]['value'];
		$title = $tet->get("title")->getValue()[0]['value'];
		$unpubishedList[$nid] = $title;
	}
	$unpubishedList[$driverdefaultid]=$driverdefaulttext;
	//dump($unpubishedList);
	//dump($form['field_driver_name']['widget']['#options']);
	$form['field_driver_name']['widget']['#options'] = $unpubishedList;
	return $form;

}
function _vehicle_unassignment_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	//$published_state_get=$form_state->getValue('status');
	//dump($published_state_get);

	$driver_id = $form_state->getValue('field_driver_name')['0']['target_id'];
	$vehicle_id = $form_state->getValue('field_vehicle')['0']['target_id'];

	$driver_node = Node::load($driver_id);
	$vehicle_node = Node::load($vehicle_id);

	$driver_node->status = 1;
	$vehicle_node->status = 1;

	$driver_node->save();
	$vehicle_node->save();
}
function _remove_roles($form)
{
	if (!empty($form['role_change']['widget']['#default_value']) &&  in_array('data_entry', $form['role_change']['widget']['#default_value'])) {

		//dump($form);
		//	unset($form['role_change']['widget']['#options']
		//			['digitec_super_admin']);
		//	unset($form['role_change']['widget']['#options']
		//			['administrator']);
		//	unset($form['role_change']['widget']['#options']
		//			['data_entry']);
		//	unset($form['role_change']['widget']['#options']
		//			['company']);
	}
	return $form;
}
function _remove_selection_roles($form)
{
	if (!empty($form['account']['role_change']['#default_value']) &&  in_array('data_entry', $form['account']['role_change']['#default_value'])) {

		//	unset($form['account']['role_change']['#options']
		//				['digitec_super_admin']);
		//	unset($form['account']['role_change']['#options']
		//			['administrator']);
		//	unset($form['account']['role_change']['#options']
		//			['data_entry']);
		//	unset($form['account']['role_change']['#options']
		//			['company']);
	}
	return $form;
}
function helloworld_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\Sql $query)
{
	//$dump($view->id());

	if ($view->id() == 'driver_details' && $view->getDisplay()->display['id'] == 'entity_reference_1') {
		// Traverse through the 'where' part of the query.
		foreach ($query->where as &$condition_group) {
			foreach ($condition_group['conditions'] as &$condition) {
				if (strpos($condition['field'], 'groups_field_data_id')) {
					$db = \Drupal::database();
					$result = $db->select('group_content_field_data', 'gcfd');
					$result->fields('gcfd', array('gid'))
						->condition('gcfd.entity_id', \Drupal::currentUser()->id());
					$val = $result->execute()->fetchCol();
					$condition['value'][':groups_field_data_id[]'] = $val;
				}
			}
		}
	}
	if ($view->id() == 'driver_mangement') {
		// Traverse through the 'where' part of the query.
		$driver_mangement = \Drupal\views\Views::getView('driver_mangement');
		$driver_mangement->setDisplay('data_export_1');
		$driver_mangement->execute();
		$view_result = $driver_mangement->result;

		// dump($view_result);
		// dump($driver_mangement);
		// dump($view->getDisplay('data_export_1'));
		// dump($view);
	}
}

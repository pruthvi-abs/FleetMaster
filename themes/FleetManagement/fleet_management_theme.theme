<?php

/**
 * @file
 * Contains theme override functions and preprocess functions
 */

use Drupal\Core\Template\RenderWrapper;
use Drupal\Core\Template\Attribute;
use Drupal\search\Form\SearchBlockForm;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\system\Form\ThemeSettingsForm;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Drupal\file\Plugin\Core\Entity\FileInterface;
use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Block\BlockPluginInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_preprocess_page() for block templates.
 */
function fleet_management_theme_preprocess_user(&$variables)
{
  /** @var User $account */
  // $account = $variables['elements']['#user'];
  // $variables['username'] = $account->getDisplayName();

}
//Or
//$user = \Drupal::currentUser();
//$settings['user']['uid'] = $user->id();


function statuschange($uid, $status)
{
  $user = \Drupal\user\Entity\User::load($uid);
  if ($status == 'Active') {
    $user->block();
    $user->save();
  } elseif ($status == 'Inactive') {
    $user->activate();
    $user->save();
  }
}

function user_data(){
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $data['companyname'] = $user->get('field_company_name')->getValue()[0]['value'];
  $data['mail'] = $user->getEmail();
  $data['contact'] = $user->get('field_contac')->getValue()[0]['value'];
  $data['address'] = $user->get('field_address')->getValue()[0]['value'];
  $data['first_name'] = $user->get('field_first_name')->getValue()[0]['value'];
  $data['last_name'] = $user->get('field_last_name')->getValue()[0]['value'];
  // dump($user);
  // dump($data);
  return $data;
}

function makereq($wirecardMerchantId, $merchant_ref, $amount, $currency, $card, $expiry_month, $expiry_year, $cvv, $ctype)
{
	$data = array();
  $userdata = user_data();
  // dump($userdata);
	$data['payment']['merchant-account-id']['value'] = $wirecardMerchantId;
	$data['payment']['request-id'] = $merchant_ref;
	$data['payment']['transaction-type'] = 'purchase';
	$data['payment']['requested-amount']['value'] = $amount;
	$data['payment']['requested-amount']['currency'] = $currency;
	$data['payment']['account-holder']['first-name'] = $userdata['first_name'];
	$data['payment']['account-holder']['last-name'] = $userdata['last_name'];
	$data['payment']['account-holder']['email'] = $userdata['mail'];
	$data['payment']['account-holder']['phone'] = $userdata['contact'];
	$data['payment']['account-holder']['address']['street1'] = 'Manjalpur';
	$data['payment']['account-holder']['address']['city'] = 'Vadodara';
	$data['payment']['account-holder']['address']['state'] = 'Gujarat';
	$data['payment']['account-holder']['address']['country'] = 'India';
	$data['payment']['three-d']['attempt-three-d'] = 'true';
	$data['payment']['card']['account-number'] = $card;
	$data['payment']['card']['expiration-month'] = $expiry_month;
	$data['payment']['card']['expiration-year'] = $expiry_year;
	$data['payment']['card']['card-security-code'] = $cvv;
	$data['payment']['card']['card-type'] = $ctype;
	$data['payment']['ip-address'] = '127.0.0.1';
	$data['payment']['payment-methods']['payment-method'][0]['name'] = 'creditcard';

  // dump($data);
  // die;
	return json_encode($data);
}

function payment($package){
	
	$_URL = 'https://wpp-ipg.bsp.com.pg/api/payment/register';
	$_username = 'bsp_digitecict';
	$_password = '0Sz7As8Fy';

	$data['merchant_id'] = '990b26b2-fbbd-11ea-adc1-0242ac120002';
	$data['currency'] = 'PGK';
	$data['card'] = '4200000000000018';
	$data['expiry_month'] = '01';
	$data['expiry_year'] = '2023';
	$data['cvv'] = '018';
	$data['ctype'] = 'visa';
	$data['merchant_ref'] = 'payment' . rand(11111, 99999) . '-' . time() . '-' . rand(1000, 10000);

	if ($package == 'Silver') {
		$data['amount'] = '100';
	} elseif ($package == 'Gold') {
		$data['amount'] = '300';
	} elseif ($package == 'Platinum') {
		$data['amount'] = '500';
	}
	$_data = makereq($data['merchant_id'], $data['merchant_ref'], $data['amount'], $data['currency'], $data['card'], $data['expiry_month'], $data['expiry_year'], $data['cvv'], $data['ctype']);
	$ch = curl_init();
	$headers = array(
		'content-Type: application/json',
		'Authorization: Basic ' . base64_encode($_username . ":" . $_password)
	);
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $_data);
	curl_setopt($ch, CURLOPT_URL, $_URL);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

	$res = curl_exec($ch);
	curl_close($ch);
	$res = json_decode($res, true);
  // dump($res);
	$redirect_destination = $res['payment-redirect-url'];
  // dump($redirect_destination);
	if (!empty($redirect_destination)) {
		// $url = Url::fromUri($redirect_destination);
    $response = new TrustedRedirectResponse($redirect_destination);
    $response->send();
	}
	return $res;
}

function fleet_management_theme_preprocess_page(&$variables)
{
  global $base_url;

  $session = \Drupal::request()->getSession();
  $database = \Drupal::database();
  $variables['company_email'] = $session->get('company_email');
  $query = $database->query("SELECT uid,field_package_value FROM user__field_package,users_field_data where uid = entity_id and mail = '" . $variables['company_email'] . "'");
  $result = $query->fetchAll();
  $field_package_value = $result[0]->field_package_value;
  $uid = $result[0]->uid;

  $variables['base_url'] = $base_url;
  $current_user = \Drupal::currentUser();
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  // dump($path_args);
  // dump($uid);
  if ($current_user->id()) {
    $user = \Drupal\user\Entity\User::load($current_user->id());
    if ($path_args[2] == '246') { // for thank you subscription page
      if(isset($_POST['bronze-btn'])){
        $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        // $field_package_expiry_date = $user->get('field_package_expiry_date');
        // dump($field_package_expiry_date);
        // $package = 'Bronze';
        // $res = payment($package);
        // dump('Bronze');
      }
      if(isset($_POST['silver-btn'])){
        $package = 'Silver';
        $res = payment($package);
        // dump('Silver');
      }
      if(isset($_POST['gold-btn'])){
        $package = 'Gold';
        $res = payment($package);
        // dump('Gold');
      }
      if(isset($_POST['platinum-btn'])){
        // dump('Platinum');
        $package = 'Platinum';
        $res = payment($package);
      }
      // dump($res);
    }
  }

  if ($current_user->id()) {
    $user = \Drupal\user\Entity\User::load($current_user->id());
    // dump($user);
    $variables['package'] = $user->get('field_package')->value;
    $variables['package_expiry_date'] = $user->get('field_package_expiry_date')->value;
    $variables['package_start_date'] = $user->get('field_package_start_date')->value;
    $variables['role'] = $user->getRoles();
    $current_date =  date("Y-m-d");
    // dump($user);
    // dump($variables['role']);
    // dump($variables['package_expiry_date']);
    // dump($current_date);
    if ($user->id() != '1') {
      if (in_array('company',$variables['role'])) {
        if($current_date != $variables['package_start_date']){
          if ($current_date >= $variables['package_expiry_date']) {
            $variables['expiry_status'] = 'expired';
          } else {
            $variables['expiry_status'] = $variables['package'];
          }
        }
        else{
          $variables['expiry_status'] = 'new-user';
        }
      } elseif (in_array('Operator',$variables['role'])) {
        $parent_company_id = $user->field_operatorcompany->getValue()[0]['target_id'];
        if ($parent_company_id) {
          $parent_company = \Drupal\user\Entity\User::load($parent_company_id);
        }
        $parent_company_status = $parent_company->status->getValue()[0]['value'];
        if (!$parent_company_status) {
          $variables['expiry_status'] = 'expired';
          // $user->block();
          // $user->save();
          // dump($parent_company_status);
        }
      }
    }
  }
  $roles = $current_user->getRoles();
  // dump($roles);
  // $key = array_search('vehicle_allotment',$roles);
  // dump($key);
  if (!empty($roles[1])) {
    $variables['role'] = $roles[1];
    if ($roles[1] == 'company' && $current_path == '/node') {
      $response = new RedirectResponse($base_url . '/company/dashboard');
      $response->send();
      return;
    } elseif ($roles[1] == 'data_entry' && $current_path == '/node') {
      $response = new RedirectResponse($base_url . '/operator/dashboard');
      $response->send();
      return;
    } elseif ($roles[1] == 'administrator' && $current_path == '/node') {
      $response = new RedirectResponse($base_url . '/admin/dashboard');
      $response->send();
      return;
    }
    if ($roles[1] == 'administrator') {
      $userStorage = \Drupal::entityTypeManager()->getStorage('user');
      $query = $userStorage->getQuery();
      $uids = $query->condition('status', '1')->condition('roles', 'company')->execute();
      $users = $userStorage->loadMultiple($uids);
      $keys = array_keys($users);
      $current_date =  date("Y-m-d");
      $end_date = date("Y-m-d", strtotime($current_date . ' + 1 month'));
      $start_date = date("Y-m-d", strtotime($current_date));
      $notifications = array();
      // dump($start_date);
      // dump($end_date);
      // dump($users);
      // array_push($user_ids,$current_user->id());
      for ($i = 0, $k = 0, $j = 0; $i < count($users); $i++) {
        $field_package_expiry_date = $users[$keys[$i]]->get('field_package_expiry_date')->getValue()[0]['value'];
        // dump($field_package_expiry_date);
        $name = $users[$keys[$i]]->get('name')->getValue()[0]['value'];
        if ($field_package_expiry_date >= $start_date && $field_package_expiry_date <= $end_date) {
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Company Package is going to expired';
          $notifications[$j][$k]['title'] = $name . '\'s package is going to be expired on ' . $field_package_expiry_date;
          $k++;
        }
      }


      $userStorage = \Drupal::entityTypeManager()->getStorage('user');
      $query = $userStorage->getQuery();
      $uids = $query->condition('status', '0')->condition('roles', 'company')->execute();
      $users = $userStorage->loadMultiple($uids);
      $keys = array_keys($users);
      $current_date =  date("Y-m-d");
      $end_date = date("Y-m-d", strtotime($current_date . ' + 1 month'));
      $start_date = date("Y-m-d", strtotime($current_date));
      // dump($users);
      // array_push($user_ids,$current_user->id());
      for ($i = 0, $k = 0, $j = count($notifications); $i < count($users); $i++) {
        $field_package_expiry_date = $users[$keys[$i]]->get('field_package_expiry_date')->getValue()[0]['value'];
        $name = $users[$keys[$i]]->get('name')->getValue()[0]['value'];
        if ($field_package_expiry_date <= $current_date) {
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Company Package is already expired';
          $notifications[$j][$k]['title'] = $name . '\'s package is already expired on ' . $field_package_expiry_date;
          $k++;
        }
      }
      // dump($notifications);
    } elseif ($roles[1] == 'company') {

      $database = \Drupal::database();
      $notification_count = 0;
      $current_user = \Drupal::currentUser();
      $user_id = $current_user->id();
      $query = $database->query("SELECT *,nid,field_insurance_expiry_date_value,title FROM `node_field_data`,`node__field_insurance_expiry_date` WHERE `type` LIKE 'vehicle' and `nid` = `entity_id` and `uid` in (" . $user_id . ") order by date(field_insurance_expiry_date_value)");
      $result = $query->fetchAll();
      $current_date =  date("Y-m-d");
      $notifications = array();

      for ($i = 0, $k = 0, $j = 0; $i < count($result); $i++) {
        $field_insurance_expiry_date_value = $result[$i]->field_insurance_expiry_date_value;
        $title = $result[$i]->title;
        if ($field_insurance_expiry_date_value <= $current_date) {
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Insurance Expired';
          $notifications[$j][$k]['id'] = 'insuranceExpired';
          $notifications[$j][$k]['title'] = $title . '\'s insurance is already expired on ' . $field_insurance_expiry_date_value;
          $k++;
        }
      }

      // fuel card
      $database = \Drupal::database();
      $query = $database->query("SELECT * FROM `node_field_data` data,`node__field_fuel_card_expiry_date` expiry_date, `node__field_fuel` fuel WHERE data.type = 'vehicle' and expiry_date.entity_id = data.nid and fuel.entity_id = data.nid and `uid` in (" . $user_id . ")  order by date(field_fuel_card_expiry_date_value)");
      $result = $query->fetchAll();
      // dump($query);
      for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
        $field_fuel_card_expiry_date_value = $result[$i]->field_fuel_card_expiry_date_value;
        $title = $result[$i]->field_fuel_value;
        if ($field_fuel_card_expiry_date_value <= $current_date) {
          // dump($field_fuel_card_expiry_date_value . " " . $title);
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Fuel Card Expired';
          $notifications[$j][$k]['id'] = 'fuelcardExpired';
          $notifications[$j][$k]['title'] = $title . '\'s fuel card is already expired on ' . $field_fuel_card_expiry_date_value;
          $k++;
        }
      }

      // safet stickers
      $database = \Drupal::database();
      $query = $database->query("SELECT * FROM `node_field_data`,`node__field_safet` WHERE type = bundle and entity_id = nid and `uid` in (" . $user_id . ") order by date(field_safet_value)");
      $result = $query->fetchAll();
      // dump($query);
      for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
        $field_safet_value = $result[$i]->field_safet_value;
        $title = $result[$i]->title;
        if ($field_safet_value <= $current_date) {
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Safety Sticker Expired';
          $notifications[$j][$k]['id'] = 'safetyStickerExpired';
          $notifications[$j][$k]['title'] = $title . '\'s safety sticker is already expired on ' . $field_safet_value;
          $k++;
        }
      }
      // dump($notifications);

      // echo "<pre>";
      // print_r(json_encode($notifications));
      // echo "</pre>";

      $database = \Drupal::database();
      $query = $database->query("SELECT * FROM `node_field_data`,`node__field_licence_expiry_date` WHERE type = bundle and entity_id = nid and `uid` in (" . $user_id . ") order by date(field_licence_expiry_date_value)");
      $result = $query->fetchAll();
      // dump($query);
      for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
        $field_licence_expiry_date_value = $result[$i]->field_licence_expiry_date_value;
        $title = $result[$i]->title;
        if ($field_licence_expiry_date_value <= $current_date) {
          // dump($field_licence_expiry_date_value . " " . $title);
          $notifications[$j][$k]['icon'] = 'ti-alert';
          $notifications[$j][$k]['type'] = 'Licence Expired';
          $notifications[$j][$k]['id'] = 'licenceExpired';
          $notifications[$j][$k]['title'] = $title . '\'s licence is already expired on ' . $field_licence_expiry_date_value;
          $k++;
        }
      }

      // fuel limit notification
      $user_ids = array();
      $user_id = '';
      $database = \Drupal::database();
      $userStorage = \Drupal::entityTypeManager()->getStorage('user');
      $query = $userStorage->getQuery();
      $uids = $query->condition('status', '1')->condition('roles', 'data_entry')->execute();
      $users = $userStorage->loadMultiple($uids);
      $keys = array_keys($users);

      array_push($user_ids, $current_user->id());
      $user_id = $current_user->id();
      for ($i = 0; $i < count($users); $i++) {
        $company_id = $users[$keys[$i]]->get('field_operatorcompany')->target_id;
        if ($current_user->id() == $company_id) {
          array_push($user_ids, $users[$keys[$i]]->id());
          $user_id .= ',' . $users[$keys[$i]]->id();
        }
      }

      $monday = strtotime("last monday");
      $monday = date('w', $monday) == date('w') ? $monday + 7 * 86400 : $monday;
      $sunday = strtotime(date("Y-m-d", $monday) . " +6 days");
      $start_date = date("Y-m-d", $monday);
      $end_date = date("Y-m-d", $sunday);
      $vehicle_ids = array();
      $total_litres_pumped = array();
      $data = array();
      // dump($start_date);
      // dump($end_date);

      $query = $database->query("SELECT * FROM `node_field_data`,`node__field_tank_capacity_in_litres` WHERE `type` LIKE 'vehicle' and nid = entity_id and `uid` in (" . $user_id . ")");
      $result = $query->fetchAll();
      // dump($query);
      // dump($result);

      for ($i = 0; $i < count($result); $i++) {
        $vehicle_id = $result[$i]->nid;
        $field_tank_capacity_in_litres_value = $result[$i]->field_tank_capacity_in_litres_value;
        $vehicle_ids[$vehicle_id] = $field_tank_capacity_in_litres_value;
        // dump($vehicle_id);
      }
      // dump($vehicle_ids);

      $query = $database->query("SELECT t1.nid,t1.vid,t1.title,t3.field_fuel_date_value,t2.field_litres_pumped_value,t4.field_vehicle_regno_target_id FROM node_field_data as t1 inner join node__field_litres_pumped as t2 on t1.nid = t2.entity_id inner join node__field_fuel_date as t3 on t1.nid = t3.entity_id inner join node__field_vehicle_regno as t4 on t4.entity_id = t1.nid WHERE `type` LIKE 'fuel_master' and `uid` in (" . $user_id . ") and ( t3.field_fuel_date_value >= '$start_date' and t3.field_fuel_date_value <= '$end_date') order by date(field_fuel_date_value)");
      $result = $query->fetchAll();
      // dump($query);  
      // dump($result);
      $title = array();
      $date = array();
      for ($i = 0; $i < count($result); $i++) {
        $vid = $result[$i]->field_vehicle_regno_target_id;
        $title[$vid] = $result[$i]->title;
        $date[$vid] = $result[$i]->field_fuel_date_value;
        $total_litres_pumped[$vid] += $result[$i]->field_litres_pumped_value;
        // dump($vid);
      }
      // dump($title);
      $keys = array_keys($vehicle_ids);
      for ($i = 0, $j = 0; $i < count($vehicle_ids); $i++) {
        // dump($date[$keys[$i]]);
        if ((string) $total_litres_pumped[$keys[$i]] > $vehicle_ids[$keys[$i]]) {
          $data[$j]['vid'] = $keys[$i];
          $data[$j]['title'] = $title[$keys[$i]];
          $data[$j]['date'] = $date[$keys[$i]];
          $data[$j]['liters_pumped'] = (string) $total_litres_pumped[$keys[$i]];
          $j++;
        }
      }

      // dump($keys);
      // dump($data);
      for ($l = 0, $k = 0, $j = count($notifications); $l < count($data); $l++) {
        $notifications[$j][$k]['icon'] = 'ti-alert';
        $notifications[$j][$k]['type'] = 'Fuel Limit Exceeded';
        $notifications[$j][$k]['id'] = 'fuelLimitExceed';
        $notifications[$j][$k]['title'] = $data[$l]['title'] . '\'s Fuel Limit is Exceeded on ' . $data[$l]['date'];
        $k++;
      }
      // dump($result);       
      // dump($vehicle_ids);

      // dump($notifications);
    } elseif ($roles[1] == 'data_entry') {

      // dump($roles);
      $database = \Drupal::database();
      $current_user = \Drupal::currentUser();
      $user_ids = array();
      $user_id = $current_user->id();
      $user = \Drupal\user\Entity\User::load($current_user->id());
      $parent_company_id = $user->field_operatorcompany->getValue()[0]['target_id'];
      array_push($user_ids, $parent_company_id);
      $user_id .= ',' . $parent_company_id;
      $notifications = array();

      if (in_array('vehicle_', $roles)) {
        $query = $database->query("SELECT *,nid,field_insurance_expiry_date_value,title FROM `node_field_data`,`node__field_insurance_expiry_date` WHERE `type` LIKE 'vehicle' and `nid` = `entity_id` and `uid` in (" . $user_id . ") order by date(field_insurance_expiry_date_value)");
        $result = $query->fetchAll();
        $current_date =  date("Y-m-d");

        for ($i = 0, $k = 0, $j = 0; $i < count($result); $i++) {
          $field_insurance_expiry_date_value = $result[$i]->field_insurance_expiry_date_value;
          $title = $result[$i]->title;
          if ($field_insurance_expiry_date_value <= $current_date) {
            $notifications[$j][$k]['icon'] = 'ti-alert';
            $notifications[$j][$k]['type'] = 'Insurance Expired';
            $notifications[$j][$k]['id'] = 'insuranceExpired';
            $notifications[$j][$k]['title'] = $title . '\'s insurance is already expired on ' . $field_insurance_expiry_date_value;
            $k++;
          }
        }
      }

      // fuel card
      if (in_array('fuel_filling', $roles)) {
        $database = \Drupal::database();
        $query = $database->query("SELECT * FROM `node_field_data` data,`node__field_fuel_card_expiry_date` expiry_date, `node__field_fuel` fuel WHERE data.type = 'vehicle' and expiry_date.entity_id = data.nid and fuel.entity_id = data.nid and `uid` in (" . $user_id . ") order by date(field_fuel_card_expiry_date_value)");
        $result = $query->fetchAll();
        // dump($query);
        for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
          $field_fuel_card_expiry_date_value = $result[$i]->field_fuel_card_expiry_date_value;
          $title = $result[$i]->field_fuel_value;
          if ($field_fuel_card_expiry_date_value <= $current_date) {
            // dump($field_fuel_card_expiry_date_value . " " . $title);
            $notifications[$j][$k]['icon'] = 'ti-alert';
            $notifications[$j][$k]['type'] = 'Fuel Card Expired';
            $notifications[$j][$k]['id'] = 'fuelcardExpired';
            $notifications[$j][$k]['title'] = $title . '\'s fuel card is already expired on ' . $field_fuel_card_expiry_date_value;
            $k++;
          }
        }
      }
      
      // fuel limit notifications
      
      if (in_array('fuel_filling', $roles)) {

      $monday = strtotime("last monday");
      $monday = date('w', $monday) == date('w') ? $monday + 7 * 86400 : $monday;
      $sunday = strtotime(date("Y-m-d", $monday) . " +6 days");
      $start_date = date("Y-m-d", $monday);
      $end_date = date("Y-m-d", $sunday);
      $vehicle_ids = array();
      $total_litres_pumped = array();
      $data = array();
      // dump($start_date);
      // dump($end_date);
      $query = $database->query("SELECT * FROM `node_field_data`,`node__field_tank_capacity_in_litres` WHERE `type` LIKE 'vehicle' and nid = entity_id and `uid` in (" . $user_id . ")");
      $result = $query->fetchAll();
      // dump($query);
      // dump($result);

      for ($i = 0; $i < count($result); $i++) {
        $vehicle_id = $result[$i]->nid;
        $field_tank_capacity_in_litres_value = $result[$i]->field_tank_capacity_in_litres_value;
        $vehicle_ids[$vehicle_id] = $field_tank_capacity_in_litres_value;
        // dump($vehicle_id);
      }
      // dump($vehicle_ids);

      $query = $database->query("SELECT t1.nid,t1.vid,t1.title,t3.field_fuel_date_value,t2.field_litres_pumped_value,t4.field_vehicle_regno_target_id FROM node_field_data as t1 inner join node__field_litres_pumped as t2 on t1.nid = t2.entity_id inner join node__field_fuel_date as t3 on t1.nid = t3.entity_id inner join node__field_vehicle_regno as t4 on t4.entity_id = t1.nid WHERE `type` LIKE 'fuel_master' and `uid` in (" . $user_id . ") and ( t3.field_fuel_date_value >= '$start_date' and t3.field_fuel_date_value <= '$end_date') order by date(field_fuel_date_value)");
      $result = $query->fetchAll();
      // dump($query);  
      // dump($result);
      $title = array();
      $date = array();
      for ($i = 0; $i < count($result); $i++) {
        $vid = $result[$i]->field_vehicle_regno_target_id;
        $title[$vid] = $result[$i]->title;
        $date[$vid] = $result[$i]->field_fuel_date_value;
        $total_litres_pumped[$vid] += $result[$i]->field_litres_pumped_value;
        // dump($vid);
      }
      // dump($title);
      $keys = array_keys($vehicle_ids);
      for ($i = 0, $j = 0; $i < count($vehicle_ids); $i++) {
        // dump($date[$keys[$i]]);
        if ((string) $total_litres_pumped[$keys[$i]] > $vehicle_ids[$keys[$i]]) {
          $data[$j]['vid'] = $keys[$i];
          $data[$j]['title'] = $title[$keys[$i]];
          $data[$j]['date'] = $date[$keys[$i]];
          $data[$j]['liters_pumped'] = (string) $total_litres_pumped[$keys[$i]];
          $j++;
        }
      }

      // dump($keys);
      // dump($data);
      for ($l = 0, $k = 0, $j = count($notifications); $l < count($data); $l++) {
        $notifications[$j][$k]['icon'] = 'ti-alert';
        $notifications[$j][$k]['type'] = 'Fuel Limit Exceeded';
        $notifications[$j][$k]['id'] = 'fuelLimitExceed';
        $notifications[$j][$k]['title'] = $data[$l]['title'] . '\'s Fuel Limit is Exceeded on ' . $data[$l]['date'];
        $k++;
      }

    }

      // safet stickers
      if (in_array('vehicle_', $roles)) {
        $database = \Drupal::database();
        $query = $database->query("SELECT * FROM `node_field_data`,`node__field_safet` WHERE type = bundle and entity_id = nid and `uid` in (" . $user_id . ") order by date(field_safet_value)");
        $result = $query->fetchAll();
        // dump($query);
        for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
          $field_safet_value = $result[$i]->field_safet_value;
          $title = $result[$i]->title;
          if ($field_safet_value <= $current_date) {
            $notifications[$j][$k]['icon'] = 'ti-alert';
            $notifications[$j][$k]['type'] = 'Safety Sticker Expired';
            $notifications[$j][$k]['id'] = 'safetyStickerExpired';
            $notifications[$j][$k]['title'] = $title . '\'s safety sticker is already expired on ' . $field_safet_value;
            $k++;
          }
        }
      }
      // dump($notifications);

      // echo "<pre>";
      // print_r(json_encode($notifications));
      // echo "</pre>";

      if (in_array('employee', $roles)) {
        $database = \Drupal::database();
        $query = $database->query("SELECT * FROM `node_field_data`,`node__field_licence_expiry_date` WHERE type = bundle and entity_id = nid and `uid` in (" . $user_id . ") order by date(field_licence_expiry_date_value)");
        $result = $query->fetchAll();
        // dump($query);
        for ($i = 0, $k = 0, $j = count($notifications); $i < count($result); $i++) {
          $field_licence_expiry_date_value = $result[$i]->field_licence_expiry_date_value;
          $title = $result[$i]->title;
          if ($field_licence_expiry_date_value <= $current_date) {
            // dump($field_licence_expiry_date_value . " " . $title);
            $notifications[$j][$k]['icon'] = 'ti-alert';
            $notifications[$j][$k]['type'] = 'Licence Expired';
            $notifications[$j][$k]['id'] = 'licenceExpired';
            $notifications[$j][$k]['title'] = $title . '\'s licence is already expired on ' . $field_licence_expiry_date_value;
            $k++;
          }
        }
      }
      // dump($notifications);

    }
    // dump($notifications);
  }
  $variables['notifications'] = json_encode($notifications);
  
  $variables['username'] = $current_user->getDisplayName();

  // Add responsive class
  if (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second']) && !empty($variables['page']['topwidget_third'])) {
    $variables['topwidget_class'] = 'col-sm-4';
  } elseif ((!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second'])) or (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_third'])) or (!empty($variables['page']['topwidget_third']) && !empty($variables['page']['topwidget_second']))) {
    $variables['topwidget_class'] = 'col-sm-6';
  } else {
    $variables['topwidget_class'] = 'col-sm-12';
  }


  // Add responsive class
  if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_forth'])) {
    $variables['bottom_class'] = 'col-md-3';
  } else if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third'])) {
    $variables['bottom_class'] = 'col-md-4';
  } else if ((!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second'])) or (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_third'])) or (!empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_second']))) {
    $variables['bottom_class'] = 'col-md-6';
  } else {
    $variables['bottom_class'] = 'col-md-12';
  }


  // Add responsive class
  if (!empty($variables['page']['midwidget_first']) && !empty($variables['page']['midwidget_second']) && !empty($variables['page']['midwidget_third']) && !empty($variables['page']['midwidget_forth'])) {
    $variables['midwidget_class'] = 'col-md-3';
  } else if (!empty($variables['page']['midwidget_first']) && !empty($variables['page']['midwidget_second']) && !empty($variables['page']['midwidget_third'])) {
    $variables['midwidget_class'] = 'col-md-4';
  } else if ((!empty($variables['page']['midwidget_first']) && !empty($variables['page']['midwidget_second'])) or (!empty($variables['page']['midwidget_first']) && !empty($variables['page']['midwidget_third'])) or (!empty($variables['page']['midwidget_third']) && !empty($variables['page']['midwidget_second']))) {
    $variables['midwidget_class'] = 'col-md-6';
  } else {
    $variables['midwidget_class'] = 'col-md-12';
  }


  // Add responsive class
  if (!empty($variables['page']['updates_first']) && !empty($variables['page']['updates_second']) && !empty($variables['page']['updates_third']) && !empty($variables['page']['updates_forth'])) {
    $variables['updates_class'] = 'col-md-3';
  } else if (!empty($variables['page']['updates_first']) && !empty($variables['page']['updates_second']) && !empty($variables['page']['updates_third'])) {
    $variables['updates_class'] = 'col-md-4';
  } else if ((!empty($variables['page']['updates_first']) && !empty($variables['page']['updates_second'])) or (!empty($variables['page']['updates_first']) && !empty($variables['page']['updates_third'])) or (!empty($variables['page']['updates_third']) && !empty($variables['page']['updates_second']))) {
    $variables['updates_class'] = 'col-md-6';
  } else {
    $variables['updates_class'] = 'col-md-12';
  }


  // Add responsive class
  if (!empty($variables['page']['features_first']) && !empty($variables['page']['features_second']) && !empty($variables['page']['features_third'])) {
    $variables['features_class'] = 'col-md-4';
    $variables['features_first_class'] = 'col-md-4';
  } elseif ((!empty($variables['page']['features_first']) && !empty($variables['page']['features_second'])) or (!empty($variables['page']['features_first']) && !empty($variables['page']['features_third'])) or (!empty($variables['page']['features_third']) && !empty($variables['page']['features_second']))) {
    $variables['features_class'] = 'col-md-6';
    $variables['features_first_class'] = 'col-md-6';
  } else {
    $variables['features_class'] = 'col-md-12';
  }


  // Add responsive class.
  if (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second']) && !empty($variables['page']['footer_third'])) {
    $variables['footer_class'] = 'col-md-4';
  } elseif ((!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second'])) or (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_third'])) or (!empty($variables['page']['footer_third']) && !empty($variables['page']['footer_second']))) {
    $variables['footer_class'] = 'col-md-6';
  } else {
    $variables['footer_class'] = 'col-md-12';
  }


  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-6';
    $variables['sidebarfirst'] = 'col-md-3';
    $variables['sidebarsecond'] = 'col-md-3';
  } elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['contentlayout'] = 'col-md-9 ';
    $variables['sidebarfirst'] = 'col-md-3';
  } elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-9';
    $variables['sidebarsecond'] = 'col-md-3';
  } else {
    $variables['contentlayout'] = 'col-md-12';
  }


  // Social media global variable.
  $variables['show_social_icon'] = theme_get_setting('show_social_icon');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['instagram_url'] = theme_get_setting('instagram_url');
  $variables['rss_url'] = theme_get_setting('rss_url');
  $variables['show_credit_link'] = theme_get_setting('show_credit_link');


  //To get the current URL
  $current_url  = \Drupal::request()->getRequestUri();
  $current_path = explode("/", $current_url);
  $variables['current_path'] = $current_path[2];


  // Slider
  // Assign Variable for slider
  if ($variables['is_front']) {
    if (theme_get_setting('show_slideshow', 'fleet_management_theme') == 1) {
      $variables['show_slideshow'] = 1;
      $variables['slider_content'] = fleet_management_theme_get_slider_content();
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function fleet_management_theme_preprocess_menu(&$variables, $hook)
{
  if ($hook == 'menu__main') { // We're doing that for main menu.
    // Get the current path.
    $current_path = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, set active to li.
      if ($item['url']->toString() == $current_path) {
        // Add active link.
        $variables['items'][$key]['attributes']['class'] = 'active';
      }
    }
  }
}

/**
 * Slider
 * Implements custom function for get slider content.
 */
function fleet_management_theme_get_slider_content()
{
  $slider_content = array();
  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $fid = theme_get_setting('slide_image_path' . $i, 'fleet_management_theme');
    if (!empty($fid)) {
      // $file = file_load($fid[0]);
      $file = File::load($fid[0]);
      $uri = $file->getFileUri();
      $path = file_create_url($uri);
    } else {
      // $path = base_path() . drupal_get_path('theme', 'fleet_management_theme') . theme_get_setting('slide_image_path_' . $i, 'fleet_management_theme');
      $path = base_path() . theme_get_setting('slide_image_path_' . $i, 'fleet_management_theme');
    }
    $slider_content[$i] = '
    <div
        class="col-lg-6 d-flex flex-column justify-content-center pt-4 pt-lg-0 order-2 order-lg-1"
        data-aos="fade-up"
        data-aos-delay="200"
      >
    <h1>' . theme_get_setting('slide_title_' . $i, 'fleet_management_theme') . '</h1>
    <h2>' . theme_get_setting('slide_description_' . $i, 'fleet_management_theme') . '</h2>
    <div class="d-lg-flex">
          <a href="' . theme_get_setting('slide_url_' . $i, 'fleet_management_theme') . '" class="btn-get-started scrollto">Get Started</a>
          
        </div>
        </div>
        <div
          class="col-lg-6 order-1 order-lg-2 hero-img"
          data-aos="zoom-in"
          data-aos-delay="200"
        >
          <img
            src="' . $path . '"
            class="img-fluid animated"
            alt=""
          />
      ';
  }






  return $slider_content;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function fleet_management_theme_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{

  $form['fleet_management_theme_info'] = array(
    '#markup' => '<h2><br/>Advanced Theme Settings</h2><div class="messages messages--warning">Clear cache after making any changes in theme settings. <a href="../../config/development/performance">Click here to clear cache</a></div>'
  );

  //Social Icon Link
  $form['fleet_management_theme_settings']['social_icon'] = array(
    '#type' => 'details',
    '#title' => t('Social Media Link'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['fleet_management_theme_settings']['social_icon']['show_social_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Social Icons'),
    '#default_value' => theme_get_setting('show_social_icon'),
    '#description'   => t("Show/hide social media links"),
  );
  $form['fleet_management_theme_settings']['social_icon']['facebook_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook URL'),
    '#default_value' => theme_get_setting('facebook_url'),
  );
  $form['fleet_management_theme_settings']['social_icon']['twitter_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter URL'),
    '#default_value' => theme_get_setting('twitter_url'),
  );
  $form['fleet_management_theme_settings']['social_icon']['linkedin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('LinkedIn URL'),
    '#default_value' => theme_get_setting('linkedin_url'),
  );
  $form['fleet_management_theme_settings']['social_icon']['instagram_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Instagram URL'),
    '#default_value' => theme_get_setting('instagram_url'),
  );
  $form['fleet_management_theme_settings']['social_icon']['rss_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS URL'),
    '#default_value' => theme_get_setting('rss_url'),
  );

  // Show/hide credit
  $form['fleet_management_theme_settings']['credit_link'] = array(
    '#type' => 'details',
    '#title' => t('Footer Credit Link'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['fleet_management_theme_settings']['credit_link']['show_credit_link'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show/Hide 'Designed by Zymphonies' credit text"),
    '#default_value' => theme_get_setting('show_credit_link'),
    '#description'   => t("Highly recommend to display credit in footer"),
  );

  //Slide show configure 
  $form['fleet_management_theme_settings']['slideshow'] = array(
    '#type' => 'details',
    '#title' => t('Front Page Slideshow'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['fleet_management_theme_settings']['slideshow']['no_of_slides'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of slides'),
    '#default_value' => theme_get_setting('no_of_slides'),
    '#description'  => t("Enter the number of slides required & Save configuration"),
    '#markup' => '<div class="messages messages--warning">Clear caches after making any changes in theme settings. <a href="../../config/development/performance">Click here to clear cache</a></div>',
  );
  $form['fleet_management_theme_settings']['slideshow']['show_slideshow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Slideshow'),
    '#default_value' => theme_get_setting('show_slideshow'),
    '#description'   => t("Show/Hide Slideshow in home page"),
  );
  $form['fleet_management_theme_settings']['slideshow']['slide'] = array(
    '#markup' => t('Change the banner image, title, description and link using below fieldset'),
  );

  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $form['fleet_management_theme_settings']['slideshow']['slide' . $i] = array(
      '#type' => 'details',
      '#title' => t('Slide ' . $i),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['fleet_management_theme_settings']['slideshow']['slide' . $i]['slide_image_path' . $i] = array(
      '#type' => 'managed_file',
      '#title' => t('Slide ' . $i . ' Image'),
      '#default_value' => theme_get_setting('slide_image_path' . $i, 'fleet_management_theme'),
      '#upload_location' => 'public://',
    );
    $form['fleet_management_theme_settings']['slideshow']['slide' . $i]['slide_title_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide ' . $i . ' Title'),
      '#default_value' => theme_get_setting('slide_title_' . $i, 'fleet_management_theme'),
    );
    $form['fleet_management_theme_settings']['slideshow']['slide' . $i]['slide_description_' . $i] = array(
      '#type' => 'textarea',
      '#title' => t('Slide ' . $i . ' Description'),
      '#default_value' => theme_get_setting('slide_description_' . $i, 'fleet_management_theme'),
    );
    $form['fleet_management_theme_settings']['slideshow']['slide' . $i]['slide_url_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide ' . $i . ' URL'),
      '#default_value' => theme_get_setting('slide_url_' . $i, 'fleet_management_theme'),
    );

    // Make the uploaded images permanent.
    $image = theme_get_setting('slide_image_path' . $i, 'fleet_management_theme');
    if (!empty($image)) {
      $file = File::load($image[0]);
      $file->status = FILE_STATUS_PERMANENT;
      $file->save();
      $file_usage = \Drupal::service('file.usage');
      $file_usage_check = $file_usage->listUsage($file);
      if (empty($file_usage_check)) {
        $file_usage->add($file, 'fleet_management_theme', 'theme', $image[0]);
      }
    }
  }
}

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	$x: 0.1em;

	@if unit(_size(element-margin)) == 'rem' {
		$x: 0.1rem;
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max($x, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '%', '%25');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

// custom //

@mixin button{
	@include vendor('appearance', 'none');
	@include vendor('transition', (
		'background-color #{_duration(transition)} ease-in-out',
		'color #{_duration(transition)} ease-in-out'
	));
	background-color: transparent;
	border-radius: _size(border-radius);
	border: 0;
	box-shadow: inset 0 0 0 2px _palette(accent);
	color: _palette(accent) !important;
	cursor: pointer;
	display: inline-block;
	font-family: _font(family-heading);
	font-size: 0.8em;
	font-weight: _font(weight-heading);
	height: 3.5em;
	letter-spacing: _font(kerning-heading);
	line-height: 3.5em;
	padding: 0 2.25em;
	text-align: center;
	text-decoration: none;
	text-transform: uppercase;
	white-space: nowrap;

	&:hover {
		background-color: transparentize(_palette(accent), 0.95);
	}

	&:active {
		background-color: transparentize(_palette(accent), 0.85);
	}

	&.icon {
		&:before {
			margin-right: 0.5em;
		}
	}

	&.fit {
		width: 100%;
	}

	&.small {
		font-size: 0.6em;
	}

	&.large {
		font-size: 1em;
		height: 3.65em;
		line-height: 3.65em;
	}

	&.primary {
		background-color: _palette(accent);
		box-shadow: none;
		color: _palette(bg) !important;

		&:hover {
			background-color: lighten(_palette(accent), 3);
		}

		&:active {
			background-color: darken(_palette(accent), 3);
		}
	}

	&.disabled,
	&:disabled {
		@include vendor('pointer-events', 'none');
		opacity: 0.25;
	}
}
